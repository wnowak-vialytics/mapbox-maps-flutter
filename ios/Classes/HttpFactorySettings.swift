// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct HttpInterceptorOptions {
  var urlRegex: String
  var headers: [HttpHeader?]? = nil

  static func fromList(_ list: [Any?]) -> HttpInterceptorOptions? {
    let urlRegex = list[0] as! String
    let headers: [HttpHeader?]? = nilOrValue(list[1])

    return HttpInterceptorOptions(
      urlRegex: urlRegex,
      headers: headers
    )
  }
  func toList() -> [Any?] {
    return [
      urlRegex,
      headers,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct HttpHeader {
  var key: String
  var value: String

  static func fromList(_ list: [Any?]) -> HttpHeader? {
    let key = list[0] as! String
    let value = list[1] as! String

    return HttpHeader(
      key: key,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      value,
    ]
  }
}
private class HttpFactorySettingsInterfaceCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return HttpHeader.fromList(self.readValue() as! [Any?])
      case 129:
        return HttpInterceptorOptions.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class HttpFactorySettingsInterfaceCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? HttpHeader {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? HttpInterceptorOptions {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class HttpFactorySettingsInterfaceCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return HttpFactorySettingsInterfaceCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return HttpFactorySettingsInterfaceCodecWriter(data: data)
  }
}

class HttpFactorySettingsInterfaceCodec: FlutterStandardMessageCodec {
  static let shared = HttpFactorySettingsInterfaceCodec(readerWriter: HttpFactorySettingsInterfaceCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol HttpFactorySettingsInterface {
  func setInterceptor(options: [HttpInterceptorOptions?]) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class HttpFactorySettingsInterfaceSetup {
  /// The codec used by HttpFactorySettingsInterface.
  static var codec: FlutterStandardMessageCodec { HttpFactorySettingsInterfaceCodec.shared }
  /// Sets up an instance of `HttpFactorySettingsInterface` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: HttpFactorySettingsInterface?) {
    let setInterceptorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mapbox_maps_flutter.HttpFactorySettingsInterface.setInterceptor", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setInterceptorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let optionsArg = args[0] as! [HttpInterceptorOptions?]
        do {
          try api.setInterceptor(options: optionsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setInterceptorChannel.setMessageHandler(nil)
    }
  }
}
