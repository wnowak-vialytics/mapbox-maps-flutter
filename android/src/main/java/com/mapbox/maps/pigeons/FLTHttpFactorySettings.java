// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mapbox.maps.pigeons;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class FLTHttpFactorySettings {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class HttpInterceptorOptions {
    private @NonNull String urlRegex;

    public @NonNull String getUrlRegex() {
      return urlRegex;
    }

    public void setUrlRegex(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"urlRegex\" is null.");
      }
      this.urlRegex = setterArg;
    }

    private @Nullable List<HttpHeader> headers;

    public @Nullable List<HttpHeader> getHeaders() {
      return headers;
    }

    public void setHeaders(@Nullable List<HttpHeader> setterArg) {
      this.headers = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    HttpInterceptorOptions() {}

    public static final class Builder {

      private @Nullable String urlRegex;

      public @NonNull Builder setUrlRegex(@NonNull String setterArg) {
        this.urlRegex = setterArg;
        return this;
      }

      private @Nullable List<HttpHeader> headers;

      public @NonNull Builder setHeaders(@Nullable List<HttpHeader> setterArg) {
        this.headers = setterArg;
        return this;
      }

      public @NonNull HttpInterceptorOptions build() {
        HttpInterceptorOptions pigeonReturn = new HttpInterceptorOptions();
        pigeonReturn.setUrlRegex(urlRegex);
        pigeonReturn.setHeaders(headers);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(urlRegex);
      toListResult.add(headers);
      return toListResult;
    }

    static @NonNull HttpInterceptorOptions fromList(@NonNull ArrayList<Object> list) {
      HttpInterceptorOptions pigeonResult = new HttpInterceptorOptions();
      Object urlRegex = list.get(0);
      pigeonResult.setUrlRegex((String) urlRegex);
      Object headers = list.get(1);
      pigeonResult.setHeaders((List<HttpHeader>) headers);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class HttpHeader {
    private @NonNull String key;

    public @NonNull String getKey() {
      return key;
    }

    public void setKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"key\" is null.");
      }
      this.key = setterArg;
    }

    private @NonNull String value;

    public @NonNull String getValue() {
      return value;
    }

    public void setValue(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    HttpHeader() {}

    public static final class Builder {

      private @Nullable String key;

      public @NonNull Builder setKey(@NonNull String setterArg) {
        this.key = setterArg;
        return this;
      }

      private @Nullable String value;

      public @NonNull Builder setValue(@NonNull String setterArg) {
        this.value = setterArg;
        return this;
      }

      public @NonNull HttpHeader build() {
        HttpHeader pigeonReturn = new HttpHeader();
        pigeonReturn.setKey(key);
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(key);
      toListResult.add(value);
      return toListResult;
    }

    static @NonNull HttpHeader fromList(@NonNull ArrayList<Object> list) {
      HttpHeader pigeonResult = new HttpHeader();
      Object key = list.get(0);
      pigeonResult.setKey((String) key);
      Object value = list.get(1);
      pigeonResult.setValue((String) value);
      return pigeonResult;
    }
  }

  private static class HttpFactorySettingsInterfaceCodec extends StandardMessageCodec {
    public static final HttpFactorySettingsInterfaceCodec INSTANCE = new HttpFactorySettingsInterfaceCodec();

    private HttpFactorySettingsInterfaceCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return HttpHeader.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return HttpInterceptorOptions.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof HttpHeader) {
        stream.write(128);
        writeValue(stream, ((HttpHeader) value).toList());
      } else if (value instanceof HttpInterceptorOptions) {
        stream.write(129);
        writeValue(stream, ((HttpInterceptorOptions) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface HttpFactorySettingsInterface {

    void setInterceptor(@NonNull List<HttpInterceptorOptions> options);

    /** The codec used by HttpFactorySettingsInterface. */
    static @NonNull MessageCodec<Object> getCodec() {
      return HttpFactorySettingsInterfaceCodec.INSTANCE;
    }
    /**Sets up an instance of `HttpFactorySettingsInterface` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable HttpFactorySettingsInterface api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter.HttpFactorySettingsInterface.setInterceptor", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<HttpInterceptorOptions> optionsArg = (List<HttpInterceptorOptions>) args.get(0);
                try {
                  api.setInterceptor(optionsArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
