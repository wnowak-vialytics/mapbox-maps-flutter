// The file was generated by the Pigeon package, but all imports have been
// replaced with the `part of` directive.
part of mapbox_maps_flutter;

class HttpInterceptorOptions {
  HttpInterceptorOptions({
    required this.urlRegex,
    this.headers,
  });

  String urlRegex;

  List<HttpHeader?>? headers;

  Object encode() {
    return <Object?>[
      urlRegex,
      headers,
    ];
  }

  static HttpInterceptorOptions decode(Object result) {
    result as List<Object?>;
    return HttpInterceptorOptions(
      urlRegex: result[0]! as String,
      headers: (result[1] as List<Object?>?)?.cast<HttpHeader?>(),
    );
  }
}

class HttpHeader {
  HttpHeader({
    required this.key,
    required this.value,
  });

  String key;

  String value;

  Object encode() {
    return <Object?>[
      key,
      value,
    ];
  }

  static HttpHeader decode(Object result) {
    result as List<Object?>;
    return HttpHeader(
      key: result[0]! as String,
      value: result[1]! as String,
    );
  }
}

class _HttpFactorySettingsInterfaceCodec extends StandardMessageCodec {
  const _HttpFactorySettingsInterfaceCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is HttpHeader) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is HttpInterceptorOptions) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return HttpHeader.decode(readValue(buffer)!);
      case 129:
        return HttpInterceptorOptions.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class HttpFactorySettingsInterface {
  /// Constructor for [HttpFactorySettingsInterface].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HttpFactorySettingsInterface({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec =
      _HttpFactorySettingsInterfaceCodec();

  Future<void> setInterceptor(List<HttpInterceptorOptions?> arg_options) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.mapbox_maps_flutter.HttpFactorySettingsInterface.setInterceptor',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_options]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
